<HTML>
<HEAD>
<TITLE>Smoothing</TITLE>
</HEAD>
<BODY bgcolor="#FFFFFF" fgcolor="#000000">

<P>
<font size="+3" color="green"><B>Smoothing</B></font></P>
<P>
<TABLE border="1" cols="2" frame="box" rules="all" width="572">
<TR>
<TD width="15%" valign="top"><B>Syntax</B>:</TD>
<TD width="85%"><CODE>
vout = SMOOTH(x,y,xout)<br />
vout = SMOOTH(x,y,xout,w)<br />
mout = SPLSMOOTH(x,y,n)<br />
mout = SPLSMOOTH(x,y,n,w)<br />
mout = BIVSMOOTH(x,y,z,mx,my)</CODE>
</TD></TR>
<TR>
<TD width="15%" valign="top"><B>Defaults</B>:</TD>
<TD width="85%"><CODE>
w[1:#] = 1</CODE>
</TD></TR>
</table></p>
<p>
 Smoothing means that the output may not pass through the original data.  If it is important that the curve
 pass through the original data, use
 the <CODE><a href="interpolate.htm">INTERPOLATE</a></CODE> function,
 unless your independent variable is not monotonically increasing. In that case, use
 the <CODE><a href="interpolate.htm">SPLINTERP</a></CODE> function.
 For 2D interpolation, use the
 <CODE><a href="interpolateS06.htm">BIVINTERP</a></CODE> function.</P>
<p>
 The <CODE>SMOOTH</CODE> function calculates a smooth curve using the method of cubic
 splines under tension. The data is contained in vectors <CODE>x</CODE>, the
 independent variable, and <CODE>y</CODE>, the dependent variable. A vector is
 returned with the same length as <CODE>xout</CODE>, the output locations
 vector. Vectors <CODE>x</CODE> and <CODE>xout</CODE> must
 be strictly monotonically increasing, with <CODE>x[1] &le; xout[j] &le; x[#]</CODE>
 for <CODE>j=1,2,...,LEN(xout)</CODE></p>
<p>
 <font size="+1" color="green">SPLSMOOTH function</font></p>
<p>
 The <CODE>SPLSMOOTH</CODE> function calculates a smooth curve through the data
 contained in <CODE>x</CODE>, the independent variable,
 and <CODE>y</CODE>, the dependent variable. <CODE>x</CODE>
 need not be increasing. The number of output locations is given in
 scalar <CODE>n</CODE>. The output of this function is a matrix
 with <CODE>n</CODE> rows and <code>2</code> columns. The first column will contain
 the output locations and the second column the smoothed values.</p>
<p>
 The points are first parameterized in terms of normalized arc length. The normalized length
 of <CODE>x</CODE> is the real length divided by the range
 of <CODE>x</CODE>, that is, the maximum value minus the minimum value. The arc
 length at a point is approximated by the sum of the lengths of straight line segments connecting
 all points up to that point. A spline under tension is calculated for <CODE>x</CODE> versus arc
 length and <CODE>y</CODE> versus arc
 length. The <CODE>x</CODE> and <CODE>y</CODE> values are
 interpolated separately and then combined to form the output interpolant.</p>
<P>
 <font size="+1" color="green">Weights</font></p>
<p>
If no weights, <CODE><font color="blue">w</font></CODE>, are entered, the weight at each data point defaults
to <CODE>1</CODE>. The weights control the amount of smoothing at each data point. As the weight at a point
decreases, the spline fits that data point more closely.</P>
<p>
<font size="+1" color="green">Spline tension</font></P>
<p>
 Depending on the tension, the smoothed curve may not pass through the original data points. The tension
 corresponds to the curviness, and must be &gt; <CODE>0</CODE>. As the tension decreases, the amount of
 smoothing decreases and the data points are fit more exactly.  If it is close to zero, each
 smoothing function is almost a cubic spline and the resulting curve is quite loose.  As the tension
 increases, the fit straightens and has less curvature at peaks, valleys and endpoints.  If the tension
 is large, the smoothing is almost linear and the result approaches the least-squares line through the
 data. The default value for the tension is zero, and the tension is controlled with
 the <CODE><a href="../Characteristics/tension.htm">TENSION</a></CODE>
 characteristic.</P>
<p>
 <font size="+1" color="green">Method</font></P>
<p>
 Given a set of abscissae: <img src="smoothI01.png">, a cubic spline function over the
 region <img src="smoothI02.png">&nbsp; is composed of cubic parabolas</p>
<p>
 <center><img src="smoothI03.png"></center></p>
<p>
 where <img src="smoothI04.png">, which join at the endpoints <img src="smoothI05.png"> such
 that <img src="smoothI06.png">, <img src="smoothI07.png">, and <img src="smoothI08.png"> are continuous.</p>
<p>
 The smoothing function is constructed by minimizing</p>
<p>
 <center><img align="absmiddle" src="smoothI09.png"></center></p>
<p>
 subject to the constraint</p>
<p>
 <center><img align="absmiddle" src="smoothI10.png"></center></p>
<p>
 where &nbsp;<img align="absmiddle" src="smoothI11.png">&nbsp; are
 the weights and &nbsp;<img align="absmiddle" src="smoothI12.png">&nbsp; is the spline tension.</p>
<p>
 The solution proceeds by the standard methods of minimizing the functional</p>
<p>
 <center><img src="smoothI13.png"></center></p>
<p>
 where <img src="smoothI14.png">&nbsp; and <img src="smoothI15.png">&nbsp; are auxiliary parameters.
 The functional is minimized with respect to <img src="smoothI14.png">&nbsp; and
 <img src="smoothI15.png">&nbsp; by setting the partial
 derivatives with respect to <img src="smoothI14.png">&nbsp; and <img src="smoothI15.png">&nbsp;
 equal to zero.</p>
<P>
 <a href="smoothS01.htm"><font size="+1" color="olive">2D smoothing</font></a></P>
</BODY>
</HTML>
